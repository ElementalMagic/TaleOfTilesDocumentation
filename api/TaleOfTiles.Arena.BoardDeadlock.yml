### YamlMime:ManagedReference
items:
- uid: TaleOfTiles.Arena.BoardDeadlock
  commentId: T:TaleOfTiles.Arena.BoardDeadlock
  id: BoardDeadlock
  parent: TaleOfTiles.Arena
  children:
  - TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches(System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece},System.Int32)
  - TaleOfTiles.Arena.BoardDeadlock.GetNeighbors(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32)
  - TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  - TaleOfTiles.Arena.BoardDeadlock.HasMoveAt(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  - TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32)
  langs:
  - csharp
  - vb
  name: BoardDeadlock
  nameWithType: BoardDeadlock
  fullName: TaleOfTiles.Arena.BoardDeadlock
  type: Class
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: BoardDeadlock
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 11
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: A class that checks for board deadlock in a match-3 game.
  example: []
  syntax:
    content: 'public class BoardDeadlock : MonoBehaviour'
    content.vb: Public Class BoardDeadlock Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
- uid: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  commentId: M:TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  id: GetRowOrColumnList(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  parent: TaleOfTiles.Arena.BoardDeadlock
  langs:
  - csharp
  - vb
  name: GetRowOrColumnList(GamePiece[,], int, int, int, bool)
  nameWithType: BoardDeadlock.GetRowOrColumnList(GamePiece[,], int, int, int, bool)
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList(TaleOfTiles.Arena.GamePiece[,], int, int, int, bool)
  type: Method
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: GetRowOrColumnList
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 23
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: Returns a list of game pieces in a row or column at the given coordinate.
  example: []
  syntax:
    content: private List<GamePiece> GetRowOrColumnList(GamePiece[,] allPieces, int x, int y, int listLength = 3, bool checkRow = true)
    parameters:
    - id: allPieces
      type: TaleOfTiles.Arena.GamePiece[,]
      description: The 2D array of all game pieces.
    - id: x
      type: System.Int32
      description: The x-coordinate.
    - id: y
      type: System.Int32
      description: The y-coordinate.
    - id: listLength
      type: System.Int32
      description: The length of the list to check.
    - id: checkRow
      type: System.Boolean
      description: Flag indicating whether to check a row or column.
    return:
      type: System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
      description: A list of game pieces in the specified row or column.
    content.vb: Private Function GetRowOrColumnList(allPieces As GamePiece(,), x As Integer, y As Integer, listLength As Integer = 3, checkRow As Boolean = True) As List(Of GamePiece)
  overload: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList*
  nameWithType.vb: BoardDeadlock.GetRowOrColumnList(GamePiece(,), Integer, Integer, Integer, Boolean)
  fullName.vb: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList(TaleOfTiles.Arena.GamePiece(,), Integer, Integer, Integer, Boolean)
  name.vb: GetRowOrColumnList(GamePiece(,), Integer, Integer, Integer, Boolean)
- uid: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches(System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece},System.Int32)
  commentId: M:TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches(System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece},System.Int32)
  id: GetMinimumMatches(System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece},System.Int32)
  parent: TaleOfTiles.Arena.BoardDeadlock
  langs:
  - csharp
  - vb
  name: GetMinimumMatches(List<GamePiece>, int)
  nameWithType: BoardDeadlock.GetMinimumMatches(List<GamePiece>, int)
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches(System.Collections.Generic.List<TaleOfTiles.Arena.GamePiece>, int)
  type: Method
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: GetMinimumMatches
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 64
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: Returns a sub-list of game pieces that match the minimum required matches.
  example: []
  syntax:
    content: private List<GamePiece> GetMinimumMatches(List<GamePiece> gamePieces, int minForMatch = 2)
    parameters:
    - id: gamePieces
      type: System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
      description: The list of game pieces to check.
    - id: minForMatch
      type: System.Int32
      description: The minimum number of matches required.
    return:
      type: System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
      description: A sub-list of game pieces that match the minimum required matches.
    content.vb: Private Function GetMinimumMatches(gamePieces As List(Of GamePiece), minForMatch As Integer = 2) As List(Of GamePiece)
  overload: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches*
  nameWithType.vb: BoardDeadlock.GetMinimumMatches(List(Of GamePiece), Integer)
  fullName.vb: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches(System.Collections.Generic.List(Of TaleOfTiles.Arena.GamePiece), Integer)
  name.vb: GetMinimumMatches(List(Of GamePiece), Integer)
- uid: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32)
  commentId: M:TaleOfTiles.Arena.BoardDeadlock.GetNeighbors(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32)
  id: GetNeighbors(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32)
  parent: TaleOfTiles.Arena.BoardDeadlock
  langs:
  - csharp
  - vb
  name: GetNeighbors(GamePiece[,], int, int)
  nameWithType: BoardDeadlock.GetNeighbors(GamePiece[,], int, int)
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors(TaleOfTiles.Arena.GamePiece[,], int, int)
  type: Method
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: GetNeighbors
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 93
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: Returns a list of neighboring game pieces at the specified coordinate.
  example: []
  syntax:
    content: private List<GamePiece> GetNeighbors(GamePiece[,] allPieces, int x, int y)
    parameters:
    - id: allPieces
      type: TaleOfTiles.Arena.GamePiece[,]
      description: The 2D array of all game pieces.
    - id: x
      type: System.Int32
      description: The x-coordinate.
    - id: y
      type: System.Int32
      description: The y-coordinate.
    return:
      type: System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
      description: A list of neighboring game pieces.
    content.vb: Private Function GetNeighbors(allPieces As GamePiece(,), x As Integer, y As Integer) As List(Of GamePiece)
  overload: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors*
  nameWithType.vb: BoardDeadlock.GetNeighbors(GamePiece(,), Integer, Integer)
  fullName.vb: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors(TaleOfTiles.Arena.GamePiece(,), Integer, Integer)
  name.vb: GetNeighbors(GamePiece(,), Integer, Integer)
- uid: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  commentId: M:TaleOfTiles.Arena.BoardDeadlock.HasMoveAt(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  id: HasMoveAt(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32,System.Int32,System.Int32,System.Boolean)
  parent: TaleOfTiles.Arena.BoardDeadlock
  langs:
  - csharp
  - vb
  name: HasMoveAt(GamePiece[,], int, int, int, bool)
  nameWithType: BoardDeadlock.HasMoveAt(GamePiece[,], int, int, int, bool)
  fullName: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt(TaleOfTiles.Arena.GamePiece[,], int, int, int, bool)
  type: Method
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: HasMoveAt
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 144
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: Checks if there is a possible move at the specified position on the board.
  example: []
  syntax:
    content: private bool HasMoveAt(GamePiece[,] allPieces, int x, int y, int listLength = 3, bool checkRow = true)
    parameters:
    - id: allPieces
      type: TaleOfTiles.Arena.GamePiece[,]
      description: The 2D array of all game pieces.
    - id: x
      type: System.Int32
      description: The x-coordinate.
    - id: y
      type: System.Int32
      description: The y-coordinate.
    - id: listLength
      type: System.Int32
      description: The length of the list to check.
    - id: checkRow
      type: System.Boolean
      description: Flag indicating whether to check a row or column.
    return:
      type: System.Boolean
      description: True if there is a possible move, false otherwise.
    content.vb: Private Function HasMoveAt(allPieces As GamePiece(,), x As Integer, y As Integer, listLength As Integer = 3, checkRow As Boolean = True) As Boolean
  overload: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt*
  nameWithType.vb: BoardDeadlock.HasMoveAt(GamePiece(,), Integer, Integer, Integer, Boolean)
  fullName.vb: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt(TaleOfTiles.Arena.GamePiece(,), Integer, Integer, Integer, Boolean)
  name.vb: HasMoveAt(GamePiece(,), Integer, Integer, Integer, Boolean)
- uid: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32)
  commentId: M:TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32)
  id: IsDeadlocked(TaleOfTiles.Arena.GamePiece[0:,0:],System.Int32)
  parent: TaleOfTiles.Arena.BoardDeadlock
  langs:
  - csharp
  - vb
  name: IsDeadlocked(GamePiece[,], int)
  nameWithType: BoardDeadlock.IsDeadlocked(GamePiece[,], int)
  fullName: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked(TaleOfTiles.Arena.GamePiece[,], int)
  type: Method
  source:
    remote:
      path: Assets/Scripts/BoardDeadlock.cs
      branch: dev
      repo: https://github.com/ElementalMagic/Match-3-Mobile-Game.git
    id: IsDeadlocked
    path: ../Assets/Scripts/BoardDeadlock.cs
    startLine: 192
  assemblies:
  - Assembly-CSharp
  namespace: TaleOfTiles.Arena
  summary: Checks if the board is deadlocked, i.e. if there are no more moves available.
  example: []
  syntax:
    content: public bool IsDeadlocked(GamePiece[,] allPieces, int listLength = 3)
    parameters:
    - id: allPieces
      type: TaleOfTiles.Arena.GamePiece[,]
      description: The 2D array of all game pieces.
    - id: listLength
      type: System.Int32
      description: The length of the list to check.
    return:
      type: System.Boolean
      description: True if the board is deadlocked, false otherwise.
    content.vb: Public Function IsDeadlocked(allPieces As GamePiece(,), listLength As Integer = 3) As Boolean
  overload: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked*
  nameWithType.vb: BoardDeadlock.IsDeadlocked(GamePiece(,), Integer)
  fullName.vb: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked(TaleOfTiles.Arena.GamePiece(,), Integer)
  name.vb: IsDeadlocked(GamePiece(,), Integer)
references:
- uid: TaleOfTiles.Arena
  commentId: N:TaleOfTiles.Arena
  href: TaleOfTiles.html
  name: TaleOfTiles.Arena
  nameWithType: TaleOfTiles.Arena
  fullName: TaleOfTiles.Arena
  spec.csharp:
  - uid: TaleOfTiles
    name: TaleOfTiles
    href: TaleOfTiles.html
  - name: .
  - uid: TaleOfTiles.Arena
    name: Arena
    href: TaleOfTiles.Arena.html
  spec.vb:
  - uid: TaleOfTiles
    name: TaleOfTiles
    href: TaleOfTiles.html
  - name: .
  - uid: TaleOfTiles.Arena
    name: Arena
    href: TaleOfTiles.Arena.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList*
  commentId: Overload:TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList
  href: TaleOfTiles.Arena.BoardDeadlock.html#TaleOfTiles_Arena_BoardDeadlock_GetRowOrColumnList_TaleOfTiles_Arena_GamePiece_0
  name: GetRowOrColumnList
  nameWithType: BoardDeadlock.GetRowOrColumnList
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetRowOrColumnList
- uid: TaleOfTiles.Arena.GamePiece[,]
  isExternal: true
  href: TaleOfTiles.Arena.GamePiece.html
  name: GamePiece[,]
  nameWithType: GamePiece[,]
  fullName: TaleOfTiles.Arena.GamePiece[,]
  nameWithType.vb: GamePiece(,)
  fullName.vb: TaleOfTiles.Arena.GamePiece(,)
  name.vb: GamePiece(,)
  spec.csharp:
  - uid: TaleOfTiles.Arena.GamePiece
    name: GamePiece
    href: TaleOfTiles.Arena.GamePiece.html
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: TaleOfTiles.Arena.GamePiece
    name: GamePiece
    href: TaleOfTiles.Arena.GamePiece.html
  - name: (
  - name: ','
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
  commentId: T:System.Collections.Generic.List{TaleOfTiles.Arena.GamePiece}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<GamePiece>
  nameWithType: List<GamePiece>
  fullName: System.Collections.Generic.List<TaleOfTiles.Arena.GamePiece>
  nameWithType.vb: List(Of GamePiece)
  fullName.vb: System.Collections.Generic.List(Of TaleOfTiles.Arena.GamePiece)
  name.vb: List(Of GamePiece)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TaleOfTiles.Arena.GamePiece
    name: GamePiece
    href: TaleOfTiles.Arena.GamePiece.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TaleOfTiles.Arena.GamePiece
    name: GamePiece
    href: TaleOfTiles.Arena.GamePiece.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches*
  commentId: Overload:TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches
  href: TaleOfTiles.Arena.BoardDeadlock.html#TaleOfTiles_Arena_BoardDeadlock_GetMinimumMatches_System_Collections_Generic_List_TaleOfTiles_Arena_GamePiece__System_Int32_
  name: GetMinimumMatches
  nameWithType: BoardDeadlock.GetMinimumMatches
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetMinimumMatches
- uid: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors*
  commentId: Overload:TaleOfTiles.Arena.BoardDeadlock.GetNeighbors
  href: TaleOfTiles.Arena.BoardDeadlock.html#TaleOfTiles_Arena_BoardDeadlock_GetNeighbors_TaleOfTiles_Arena_GamePiece_0
  name: GetNeighbors
  nameWithType: BoardDeadlock.GetNeighbors
  fullName: TaleOfTiles.Arena.BoardDeadlock.GetNeighbors
- uid: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt*
  commentId: Overload:TaleOfTiles.Arena.BoardDeadlock.HasMoveAt
  href: TaleOfTiles.Arena.BoardDeadlock.html#TaleOfTiles_Arena_BoardDeadlock_HasMoveAt_TaleOfTiles_Arena_GamePiece_0
  name: HasMoveAt
  nameWithType: BoardDeadlock.HasMoveAt
  fullName: TaleOfTiles.Arena.BoardDeadlock.HasMoveAt
- uid: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked*
  commentId: Overload:TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked
  href: TaleOfTiles.Arena.BoardDeadlock.html#TaleOfTiles_Arena_BoardDeadlock_IsDeadlocked_TaleOfTiles_Arena_GamePiece_0
  name: IsDeadlocked
  nameWithType: BoardDeadlock.IsDeadlocked
  fullName: TaleOfTiles.Arena.BoardDeadlock.IsDeadlocked
